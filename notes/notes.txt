RMM Level 1 introduces "identifiers", but they can be completely unconstrained.

http://example.com/account/deposit?value=500

RMM Level 2 (HTTP constraints) will shape how those are actually used.

Many REST APIs require you to read their API layout in order to have your code know how to invoke it:

http://flickr.com/api/foo/baz/bat/term=dog

but this will break things if your code learns the old way and then they change it:

http://flickr.com/api/foo/bat/baz/term=dog

Clients should "learn things" from the representations. They will be less tightly-coupled then.

Stable identifiers will draw attention. Here is the example of the "index based upon image properties link":

http://labs.systemone.at/retrievr

That works because Flickr uses stable identifiers. Otherwise, it wouldn't be in the Retrievr folks' interest to build something that depends upon another system.

We want to build Resource-Oriented Architectures that are stable so people will find value in what we produce beyond our initial usage.
=======
This is a note ...

Richardson Maturity Model
  0 -- SOAP
  1 -- URL only, where client "knows" what it's going to get
  2 -- HTTP and URL, using standard verbs
  3 -- HATEOAS, HTTP and URL

Most "REST" API's are at level 2.  If you put "v1" or "v2" in an endpoint is a good indication that your API is at
level 2.

-----
Backing into URL problems

http://example.com/employee/bsletten
http://example.com/employee/status

Think of the URLs as vectors in information spaces.

http://example.com/employee/id/bsletten
http://example.com/employee/status/full-time

-----

Matrix URI

scheme:/authority/hierarchical/.....

http://example.com/menu?type=veg
http://example.com/menu?type=gf
http://example.com/menu?type=meat

http://example.com/menu;lat=2342;lon=3423

GET http://example.com/menu;type=gf;color=orange;lat=;lon=

[Representation]

http://example.com/menu/id/big-mac
http://example.com/menu/id/garlic-fries
http://example.com/menu/id/frozen-pickles
http://example.com/menu/id/1234238

---- 

Memorable

http://example.com/time/timezone/PDT
http://example.com/time/timezone/EDT

----

PATCHing resources:

> "email" : "brian@foo.com"
< "email" : "brian@bar.com"


<xml>
  <!-- Not has canonical form -->
</xml>

http://tools.ietf.org/html/rfc5261
(also a JSON Patch format)





